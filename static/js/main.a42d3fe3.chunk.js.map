{"version":3,"sources":["logo.svg","pages/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","props","state","viewButton","mainDisplay","showMainDisplay","bind","setTimeout","setState","window","document","documentElement","this","exitFullScreen","class","className","style","height","display","justifyContent","onClick","React","Component","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,sMCGtBC,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAY,EACZC,aAAa,GAEjB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBANR,E,gEAQE,IAAD,OAChBC,YAAW,WACP,EAAKC,SAAS,CAAEL,YAAY,MAC7B,KACOM,OAAOC,SACLA,SAASC,kB,wHAwBrBC,KAAKJ,SAAS,CACVJ,aAAa,IAEjBQ,KAAKC,mB,+BAGL,OACI,oCACKD,KAAKV,MAAME,YACR,oCACI,6BACI,yBAAKU,MAAM,+BAA8B,0BAAMA,MAAM,mBACrD,yBAAKA,MAAM,gCAA+B,0BAAMA,MAAM,oBACtD,yBAAKA,MAAM,oCAAmC,0BAAMA,MAAM,qBAC1D,yBAAKA,MAAM,gCAA+B,0BAAMA,MAAM,qBACtD,yBAAKC,UAAU,aACX,0BAAMA,UAAU,YAAhB,gBAKZ,oCACI,yBAAKA,UAAU,kCACX,yBAAKD,MAAM,+BAA8B,0BAAMA,MAAM,mBACrD,yBAAKA,MAAM,gCAA+B,0BAAMA,MAAM,oBACtD,yBAAKA,MAAM,oCAAmC,0BAAMA,MAAM,qBAC1D,yBAAKA,MAAM,gCAA+B,0BAAMA,MAAM,qBACtD,yBAAKC,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SACX,6DACA,2DACA,0EACA,0BAAMC,MAAO,CAAEC,OAAQ,UAAvB,0BAC2B,uBAAGH,MAAM,QAAT,QAD3B,IACoD,uBAAGA,MAAM,SAAT,iBADpD,gBAEJ,gCAIJ,8BACKF,KAAKV,MAAMC,WAAa,yBAAKa,MAAO,CAAEE,QAAS,OAAQC,eAAgB,WAAY,4BAAQC,QAASR,KAAKP,gBAAiBU,UAAU,UAAjD,cAAqF,6BAAK,4BAAQA,UAAU,WAAlB,uB,GA9E5KM,IAAMC,YCgB7BC,MAZf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,QCAvB2B,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a42d3fe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d31ba495.svg\";","import React from 'react';\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\n\r\nexport default class MainPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewButton: false,\r\n            mainDisplay: false,\r\n        }\r\n        this.showMainDisplay = this.showMainDisplay.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ viewButton: true })\r\n        }, 10000)\r\n        var doc = window.document;\r\n        var docEl = document.documentElement;\r\n\r\n        // var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;\r\n\r\n        // if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\r\n        //     requestFullScreen.call(docEl);\r\n        // }\r\n    }\r\n    fullScreen() {\r\n    }\r\n\r\n    exitFullScreen() {\r\n        // var elemWi = window.document;\r\n        // var elem = document.documentElement;\r\n        // if (elemWi.ExitFullscreen) {\r\n        //     elemWi.ExitFullscreen();\r\n        // } else if (elemWi.webkitExitFullscreen) {\r\n        //     elemWi.webkitExitFullscreen();\r\n        // } else if (elemWi.msExitFullscreen) {\r\n        //     elemWi.msExitFullscreen();\r\n        // }\r\n    }\r\n    showMainDisplay() {\r\n        // e.preventDefault();\r\n        this.setState({\r\n            mainDisplay: true,\r\n        })\r\n        this.exitFullScreen();\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.mainDisplay ?\r\n                    <>\r\n                        <div>\r\n                            <div class=\"hero-app-1 custom-animation\"><span class=\"particle-span\"></span></div>\r\n                            <div class=\"hero-app-2 custom-animation4\"><span class=\"particle-skill\"></span></div>\r\n                            <div class=\"hero-app-2-fix custom-animation2\"><span class=\"particle-span-2\"></span></div>\r\n                            <div class=\"hero-app-3 custom-animation3\"><span class=\"particle-span-3\"></span></div>\r\n                            <div className=\"container\">\r\n                                <span className=\"slide-up\">hai qibe!</span>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <div className=\"main_container intro-container\">\r\n                            <div class=\"hero-app-1 custom-animation\"><span class=\"particle-span\"></span></div>\r\n                            <div class=\"hero-app-2 custom-animation4\"><span class=\"particle-skill\"></span></div>\r\n                            <div class=\"hero-app-2-fix custom-animation2\"><span class=\"particle-span-2\"></span></div>\r\n                            <div class=\"hero-app-3 custom-animation3\"><span class=\"particle-span-3\"></span></div>\r\n                            <div className=\"container\">\r\n                                <div className=\"scroller\">\r\n                                    <div className=\"inner\">\r\n                                        <span>I'm Akhmadkha. ðŸ‘‹</span>\r\n                                        <span>I have passion in Design.</span>\r\n                                        <span>I love seeing things that are aesthetic.</span>\r\n                                        <span style={{ height: '10rem' }}>\r\n                                            But my real goal is to <a class=\"blue\">make</a> <a class=\"blueb\">people smile.</a> ðŸ˜‰\r\n                                    <br />\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <span>\r\n                                    {this.state.viewButton ? <div style={{ display: 'flex', justifyContent: 'center' }}><button onClick={this.showMainDisplay} className=\"btn-ak\">View More</button></div> : <div><button className=\"btn-ak1\">View More</button></div>}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './assets/main.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport MainPage from './pages/main';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={MainPage}/>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}